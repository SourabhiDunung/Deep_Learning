# -*- coding: utf-8 -*-
"""image_recognization_using_transfer_learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B-TK8AUwACoXOrIcE1ZP1LNvnDwMI9Yq
"""

import tensorflow_datasets as tfds
import tensorflow as tf

#load dataset
(trainX,trainY),(testX,testY)=tfds.load("tf_flowers", split=["train[:70%]","train[:30%]"], batch_size=-1,as_supervised=True,)

trainX=tf.image.resize(trainX,(150,150)) #resizing image
testX=tf.image.resize(testX,(150,150))

#transforming labels to correct format
trainY=tf.keras.utils.to_categorical(trainY,num_classes=5)
testY=tf.keras.utils.to_categorical(testY,num_classes=5)

from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input

#loading vgg16 base model
base_model=VGG16(weights="imagenet",include_top=False,input_shape=trainX[0].shape)
base_model.trainable=False #if not trainable weights

#preprocessing inputs
trainX=preprocess_input(trainX)
testX=preprocess_input(testX)

base_model.summary()

from tensorflow.keras import layers,models

Flatten_layer=layers.Flatten()
dense_layer1=layers.Dense(50,activation="relu")
dense_layer2=layers.Dense(25,activation="relu")
pred_layer=layers.Dense(5,activation="softmax")

model=models.Sequential([
base_model,Flatten_layer,dense_layer1,dense_layer2,pred_layer])

from tensorflow.keras.callbacks import EarlyStopping

model.compile(optimizer='sgd',loss='categorical_crossentropy',metrics=['accuracy'])

model.fit(trainX,trainY,epochs=4) #while uploading run for more epochs

model.predict(testX[:1])