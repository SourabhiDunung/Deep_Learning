# -*- coding: utf-8 -*-
"""Number_classification_using_MNIST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q6ipKUHCJI69-1D7iRSZWkMqLwwHYhqr

Name: Sourabhi Dunung

Roll No: UEC2021211

Class: E&Tc B DL3

Experiment 3B: Perform classification using MNIST dataset

# 1. Import Libraries
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

"""# Load MNIST dataset"""

(trainX,trainY),(testX,testY) = tf.keras.datasets.mnist.load_data()

"""# Check the shape of input image and label(X,Y)"""

trainX.shape

testX.shape

plt.imshow(testX[9999])

testX[9999]

"""# use one hot encoding to convert into 10 classes(0-9)"""

trainY=tf.keras.utils.to_categorical(trainY,num_classes=10)
trainY[0]

testY=tf.keras.utils.to_categorical(testY,num_classes=10)
testY[0]

"""# define sequential keras model(one input and one output tensor)"""

model = tf.keras.models.Sequential()

"""# Layer 1"""

model.add(tf.keras.layers.Reshape((784,), input_shape = (28,28,)))
model.add(tf.keras.layers.BatchNormalization())

"""# Layer2: Layer1 output is input for layer2"""

model.add(tf.keras.layers.Dense(100,activation='relu'))
model.output
model.add(tf.keras.layers.Dense(100,activation='relu'))
model.output

"""# Add Fully connected last layer"""

model.add(tf.keras.layers.Dense(10,activation='softmax'))
model.output

"""# Model summary"""

model.summary()

"""# Compile model"""

model.compile(optimizer='sgd',loss='categorical_crossentropy',metrics='accuracy')

"""# check for epochs-model.fit"""

model.fit(trainX,trainY,validation_data=(testX,testY),epochs=3)

"""# Test/Predict It"""

model.predict(testX[:1])

testY[:1]

plt.imshow(testX[0])

model.predict(testX[:3])

testY[:3]

plt.imshow(testX[4])